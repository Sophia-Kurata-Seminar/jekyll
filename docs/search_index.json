[["index.html", "Jekyllマニュアル 事前準備 0.1 Ruby,Jekyllのインストール 0.2 基礎知識", " Jekyllマニュアル Sophia-kurata-seminar 2021-03-14 事前準備 0.1 Ruby,Jekyllのインストール 以下のサイトを参考に、インストールを進めてください。注意事項や重要事項だけ、以下にまとめたので、併せて確認してみて下さい。 参考：http://jekyllrb-ja.github.io/docs/installation/windows/ RubyInstallerをインストールする RubyInstallerのサイト：https://rubyinstaller.org/downloads/ RubyInstallerのサイトから、Rubyインストーラーをインストールする際には、【WITH DEVKIT】の中で、太字になっているバージョンをダウンロードすることをお勧めします。 JekyllとBundlerをインストールする コマンドプロンプトを開き、 gem install jekyll bundler を入力すると、JekyllとBundlerがインストールされます。 以下のコマンドで、インストールできているか確認してみましょう。 jekyll -v 0.2 基礎知識 ここまでインストールの仕方を説明してきましたが、ここからは用語の説明です。 参考：https://qiita.com/oshou/items/6283c2315dc7dd244aef Ruby,jekyllとは Rubyはプログラミング言語のひとつで、jekyllはこの言語で書かれています。jekyllとは、Rubyで書かれた（静的）サイトを作るソフトウェアのことで、テンプレートを使えば簡単にサイトを作成できます。 jekyllテンプレートのサイト：https://jekyllthemes.io/github-pages-themes Gemとは プログラミング言語は機能をまとめたライブラリーを作成されていることがよくあります。RubyではそのライブラリーのことをGemと呼びます（Rでいうパッケージのことです。）利用しいたいgemをgemfileに記入すればそのgemの機能を使うことができます。 bundlerとは Gem同士の依存関係を整理するものです。bundler自体もgemのひとつですが、以下のような場合に備えて使用します。 「GemAを使うために、GemBを使う。さらにGemBを使うためにはGemCを使う」という時、GemCがアップデートされるとAもBも使えなくなる場合があります。こういう場合に、bundlerはgem同士の互換性を保ちながら各gemの導入、管理を行ってくれます。 特に、共同作業を行う場合、自分と相手のGemのバージョンが異なると、エラーメッセージが表示されます。なので、定期的に以下のコマンドで、Gemの管理を行いましょう。 ＊またエラーメッセージが出たときも同様に、まずは以下のコマンドを試してみてください。 bundle install //gemfileに書かれたgemを読み込む bundle update //gemのバージョン更新 "],["jekyllで0からサイトを作る.html", "Chapter 1 Jekyllで0からサイトを作る 1.1 GitHubにレポジトリを作成 1.2 Jekyllフォルダを作成する 1.3 _config.ymlの変更 1.4 サイトのプレビューを表示＆出力 1.5 Githubへのpush 1.6 Githubで公開", " Chapter 1 Jekyllで0からサイトを作る Default themeを利用して、ゼロからサイトを作ってみましょう。 1.1 GitHubにレポジトリを作成 まずはGithubにリポジトリを作成します。後でここに必要なフォルダをアップロード(push)します。 1.2 Jekyllフォルダを作成する コマンドプロンプトに以下のコードを書き込み、jekyllフォルダを作成してみましょう。 cd ~desktop #作業したい場所（デスクトップ等）に移動 jekyll new フォルダ名 #Jekyllの構成ファイルが作成される cd フォルダ名 #作成したJekyllフォルダに移動 1.3 _config.ymlの変更 作成したフォルダの中にある、_config.ymlの変更を行います。(VS codeなどで開けます。) VS codeのインストール Visual Studio Code：https://azure.microsoft.com/ja-jp/products/visual-studio-code/ baseurl:&quot;/レポジトリ名&quot; url:&quot;https://ユーザー名.github.io&quot; 1.4 サイトのプレビューを表示＆出力 jekyll serve --watch #プレビュー兼Build(_siteフォルダ内にhtmlが出力される) jekyll build -d docs #docsフォルダ内に、htmlなどが出力される。 jekyll serve行うと、コマンドプロンプト上でローカル環境用のURLが発行されます。(例:http://127.0.0.1:4000/~~) このURLをブラウザ上に貼り付けることでサイトのプレビューを確認できます。問題がなければjekyll buildを行いましょう。 *buildはデフォルトでは、_siteフォルダ内に出力されますが、Github pagesではdocsフォルダが必要になるため、-dのオプションを使いdocsフォルダに出力します。 1.5 Githubへのpush 公開に向けて、Githubへのpushを行います。 参考：https://sh-2.github.io/Rstudio_bookdown git init git remote add orign リポジトリのURL git add . git commit- m&quot;コメント&quot; git push origin master 1.6 Githubで公開 pushが成功したら、Githubのsettingから公開用に設定を切り替えます。 masterブランチのdocsを公開させましょう。 "],["テンプレートテーマを使ってwebサイト制作.html", "Chapter 2 テンプレートテーマを使ってWEBサイト制作 2.1 Githubでレポジトリを作成 2.2 Jekyllフォルダを作成する 2.3 テーマの変更 2.4 プレビュー＆出力 2.5 Githubにpush 2.6 Githubで公開 2.7 諸注意", " Chapter 2 テンプレートテーマを使ってWEBサイト制作 倉田ゼミのHPでは”just-the-doc”というテンプレートテーマを使用しています。 参考：https://jekyll-themes.com/just-the-docs/ 2.1 Githubでレポジトリを作成 2.2 Jekyllフォルダを作成する コマンドプロンプトに以下のコードを書き込み、jekyllフォルダを作成してみましょう。 cd ~desktop #作業したい場所（デスクトップ等）に移動 jekyll new フォルダ名 #Jekyllの構成ファイルが作成される cd フォルダ名 #作成したJekyllフォルダに移動 2.3 テーマの変更 デフォルトのテーマを、選んだテーマ(just-the-docs)に変更しましょう。 _postフォルダを削除し、_config.yml,gemfile,マークダウンファイルを編集していきます。 _config.yml baseurl: &quot;/リポジトリ名&quot; url: &quot;https://ユーザ名.github.io&quot; theme: &quot;just-the-docs&quot; #に上書き gemfile gem &quot;minima&quot;, &quot;~&gt; 2.5&quot; #消す # gem &quot;github-pages&quot;, group: :jekyll_plugins #ここはコメントアウトしたままで良さげ。 gem &quot;just-the-docs&quot; #記入する マークダウンファイル VS codeで編集しましょう。 倉田ゼミでは以下の構成でフォルダを作っています。 index.MD - トップページ pages - トップページ以外のページ assets - 画像はimagesフォルダに入れる 2.4 プレビュー＆出力 cd ~フォルダ #jekyllのフォルダまで移動 bundle install #gemfileに書かれたものをインストール bundle update #gemfileをアップデート？（定期的にした方がよい） bundle exec jekyll serve --watch ##プレビュー兼Build(_siteフォルダ内にhtmlが出力される) bundle exec jekyll buidl -d docs #docsに出力。実行する前にdocsを消す。でないとdocsが多層化される。 chapter 1と違ってbundle execと頭についていますが、これはbundlerを使って依存関係を整理させているだけです。必ず使うようにしましょう。 エラーが起きる際は、bundle install,bundle updateを実行してみてください。上手くいくことがあります。 2.5 Githubにpush git init git add . git commit -m &quot;コメント&quot; git remote add origin リポジトリURL git push origin master 2.6 Githubで公開 pushが成功したら、Githubのsettingから公開用に設定を切り替えます。 masterブランチのdocsを公開させましょう。 2.7 諸注意 gemfileやconfig,ymlをいじると色々なエラーが起こるときがあります。少しずづ変更させて、どこが問題になるのか把握しやすいように作業しましょう。 jekyll serveでプレビューが更新されないときがあります。 ファイルやコマンドプロンプトを閉じてもう一度やってみる、もしくは Githubにあげてしまうのもありでしょう。 "],["共同作業について.html", "Chapter 3 共同作業について 3.1 基本の操作", " Chapter 3 共同作業について WEBサイトを共同で管理・制作していく方法を紹介します。 詳細な説明については、以下のURLのサイトを参考にしてください。 参考：https://sh-2.github.io/Rstudio_bookdown 3.1 基本の操作 管理者とAさんがGithubのリポジトリを利用して、共同でサイトの更新を行う場合の重要なポイントについて説明します。 管理者はこれまでと同様の手順でサイトを作成し、Githubにプッシュします。 Aさんの動きを見てみましょう。 まず、管理者が作成したリモートリポジトリを、自分のPC上にコピーします。 cd デスクトップ git clone リポジトリのURL 次にAさんは、自分が作業するブランチを作成します。 cd コピーしたフォルダ #コピーしたリモートリポジトリのフォルダへ移動 git branch #今あるブランチと、自分のいるブランチ(＊)を表示 git branch branchA #masterからbranchAを分岐させる。(masterにいる状態で実行しましょう) git checkout branchA #branchAに移動。今後はここで編集する。 git branch #今いるブランチ(＊)を確認（branchAにいるのか確認。） Aさんの作業環境が整いました。Aさんはマークダウンファイルの編集を行い、以下のコマンドをこれまで同様に実行します。 bundle exec jekyll server bundle exec jekyll build -d docs git add . git commit -m&quot;コメント&quot; branchAの編集内容をリモートリポジトリにpushします。 git push origin branchA #branchAの情報リモートリポジトリにアップロード Githubのリポジトリを確認すると、branchAというブランチを確認することができます。 続いて、プルリクエストとマージを行います。 branchAがpushされた後、GitHubを開くとpull requestを行うボタンが追加されています。押してみましょう。 編集内容についてコメントを残し、【Create pull request】を押します。 管理者はAさんのプルリクエストを確認することができます。 管理者は、masterとbranchAのマージを行う必要があります。プルリクエストされた画面にある【merge】】ボタンを押せば完了です。 ＊まれにコンフリクトを起こしている場合があります。Githubの案内に従って、コンフリクト内容を確認し、必要に応じて内容の削除を行ってください。 マージされたことを確認できたら、Aさんは最新のリモートリポジトリの情報をローカルに持ってきて、不要になったブランチを削除します。 git pull origin master #ローカルをリモートの最新情報に更新 git checkout master #masterブランチに移動 git branch #branchAの存在、masterにいることを確認 git branch -d branchA #branchAの削除 git branch #branchAが消えているのか確認 2回目以降、Aさんが更新作業を行う場合や新たなメンバーが更新作業を共同で行う場合も、この方法で進めることができます。 "],["共同作業コンフリクト編.html", "Chapter 4 共同作業(コンフリクト編) 4.1 単純なコンフリクトの場合 4.2 複雑なコンフリクトの場合", " Chapter 4 共同作業(コンフリクト編) 共同作業を行っていると、コンフリクトが発生し、マージができない事態が発生することがあります。 本章では、コンフリクトが発生し、マージがうまくいかないときの対処法をご紹介します。 4.1 単純なコンフリクトの場合 Githubの画面上の【Resolve Conflicts】を押します。すると、以下のような画面が表示されるので、不要な部分を削除することでコンフリクトを解決しましょう。 （画像作成中） 着色された部分について、保存したい変更を残し、それ以外は削除します。 4.2 複雑なコンフリクトの場合 ブランチが3つ以上ある場合や、プルリクエストの前に複雑な作業を行った場合、先ほどのようにGithub（ブラウザ版）上で対処できないことがあります。 そんな時は以下の2つの方法を順に試してみてください。 4.2.1 FetchとMerge git fetch 上のコマンドは、リモートリポジトリから最新情報をローカルリポジトリに持ってくるものです。 pullとは異なり、ローカルリポジトリが更新されるだけでファイルは更新されません。 git merge fetchのあと、mergeすることで、ローカルのファイルが最新状態に更新されます。 4.2.2 Github(デスクトップ版)の利用 Fetch,Mergeをしてもうまくいかない場合は、Github（デスクトップ版）を利用しましょう。デスクトップ版では、複雑なコンフリクトであっても、ブラウザ版同様に、不要な部分を削除することで解決できます。 Github（デスクトップ版）：https://desktop.github.com/ "]]
