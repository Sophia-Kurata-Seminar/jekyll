[
["index.html", "Jekyllマニュアル 事前準備 0.1 Ruby,Jekyllのインストール 0.2 基礎知識", " Jekyllマニュアル Sophia-kurata-seminar 2021-02-21 事前準備 0.1 Ruby,Jekyllのインストール 以下のサイトを参考に、インストールを進めてください。注意事項や重要事項だけ、以下にまとめたので、併せて確認してみて下さい。 参考：http://jekyllrb-ja.github.io/docs/installation/windows/ RubyInstallerをインストールする RubyInstallerのサイトから、Rubyインストーラーをインストールする際には、【WITH DEVKIT】の中で、太字になっているバージョンをダウンロードすることをお勧めします。 JekyllとBundlerをインストールする コマンドプロンプトを開き、 gem install jekyll bundler を入力すると、JekyllとBundlerがインストールされます。 以下のコマンドで、インストールできているか確認してみましょう。 jekyll -v 0.2 基礎知識 Ruby: Jekyll: gem: bundler: "],
["jekyllで0からサイトを作る.html", "Chapter 1 Jekyllで0からサイトを作る 1.1 GitHubにレポジトリを作成 1.2 Jekyllフォルダを作成する 1.3 _config.ymlの変更 1.4 サイトのプレビューを表示＆出力 1.5 Githubへのpush", " Chapter 1 Jekyllで0からサイトを作る Default themeを利用して、ゼロからサイトを作ってみましょう。 1.1 GitHubにレポジトリを作成 1.2 Jekyllフォルダを作成する コマンドプロンプトに以下のコードを書き込み、jekyllフォルダを作成してみましょう。 cd ~desktop jekyll new フォルダ名　#Jekyllの構成ファイルが作成される cd フォルダ名 #作成したJekyllフォルダに移動 1.3 _config.ymlの変更 作成したフォルダの中にある、_config.ymlの変更を行います。(AtomやVS codeで開けます。) baseurl:&quot;/レポジトリ名&quot; url:&quot;https://ユーザー名.github.io&quot; 1.4 サイトのプレビューを表示＆出力 jekyll server --watch #プレビュー兼Build(_siteフォルダ内にhtmlが出力される) jekyll build --d docs #docsフォルダ内に、htmlなどが出力* *デフォルトでは、_siteフォルダ内に出力されますが、Github pagesではdocsフォルダが必要になるため、docsに出力します。 1.5 Githubへのpush 公開に向けて、Githubへのpushを行います。 参考：https://sh-2.github.io/Rstudio_bookdown git init git remote add orign URL git add . git commit- m&quot;コメント&quot; git push origin master Githubから、Settingの変更を行う "],
["テンプレートテーマを使ってwebサイト制作.html", "Chapter 2 テンプレートテーマを使ってWEBサイト制作 2.1 Githubでレポジトリを作成 2.2 Jekyllフォルダを作成する 2.3 Githubにpush 2.4 諸注意", " Chapter 2 テンプレートテーマを使ってWEBサイト制作 倉田ゼミのHPでは”just-the-doc”というテンプレートテーマを使用しています。 参考：https://jekyll-themes.com/just-the-docs/ 2.1 Githubでレポジトリを作成 2.2 Jekyllフォルダを作成する コマンドプロンプトに以下のコードを書き込み、jekyllフォルダを作成してみましょう。 cd ~desktop jekyll new フォルダ名　#Jekyllの構成ファイルが作成される デフォルトのテーマを、選んだテーマ(just-the-docs)に変更しましょう。 _postフォルダを削除し、_config.yml,gemfile,マークダウンファイルを編集していきます。 _config.yml baseurl: &quot;/リポジトリ名&quot; url: &quot;https://ユーザ名.github.io&quot; theme: &quot;just-the-docs&quot;\t#に上書き gemfile gem &quot;minima&quot;, &quot;~&gt; 2.5&quot;\t#消す # gem &quot;github-pages&quot;, group: :jekyll_plugins\t#ここはコメントアウトしたままでいいかも。 gem &quot;just-the-docs&quot;\t#config.ymlにremote themeを書く必要はないかも。themeのどちらかで良い？ マークダウンファイル VS codeやAtomで編集することができます。 ##　プレビュー＆出力 cd ~フォルダ #jekyllのフォルダまで移動 bundle install\t#gemfileに書かれたものをインストール bundle update #gemfileの依存関係をアップデート？（定期的にした方がよい） ( bundle exec jekyll s)\t#ローカル環境でプレビューできる。 &amp; _siteフォルダにhtmlが出力される。 bundle exec jekyll buidl -d docs\t#docsに結果を出力。実行する前にdocsを消す。でないとdocsが多層化される。 2.3 Githubにpush git init git add . git commit -m &quot;コメント&quot; git remote add origin リポジトリURL git push origin master github pagesのsettingをdocsに 2.4 諸注意 gemfile（やconfig,yml）をいじると色々なエラーが起こるときがある。 jekyll s(erver)は更新されないときがあるので、ファイルやターミナルを閉じてから再度やる。or無視してGithubにあげてしまうのもあり。 "],
["共同作業について.html", "Chapter 3 共同作業について 3.1 基本の操作", " Chapter 3 共同作業について WEBサイトを共同で管理・制作していく方法を紹介します。 詳細な説明については、以下のURLのサイトを参考にしてください。 参考：https://sh-2.github.io/Rstudio_bookdown 3.1 基本の操作 管理者とAさんがGithubのリポジトリを利用して、共同でサイトの更新を行う場合の重要なポイントについて説明します。 管理者はこれまでと同様の手順でサイトを作成し、Githubにプッシュします。 Aさんの動きを見てみましょう。 まず、管理者が作成したリモートリポジトリを、自分のPC上にコピーします。 cd デスクトップ git clone リポジトリのURL 次にAさんは、自分が作業するブランチを作成します。 cd コピーしたフォルダ #コピーしたリモートリポジトリのフォルダへ移動 git branch #今あるブランチと、自分のいるブランチ(＊)を表示 git branch branchA #masterからbranchAを分岐させる。(masterにいる状態で実行しましょう) git checkout branchA #branchAに移動。今後はここで編集する。 git branch #今いるブランチ(＊)を確認（branchAにいるのか確認。） Aさんの作業環境が整いました。Aさんはマークダウンファイルの編集を行い、以下のコマンドをこれまで同様に実行します。 bundle exec jekyll server bundle exec jekyll build -d docs git add . git commit -m&quot;コメント&quot; branchAの編集内容をリモートリポジトリにpushします。 git push origin branchA #branchAの情報リモートリポジトリにアップロード Githubのリポジトリを確認すると、branchAというブランチを確認することができます。 続いて、プルリクエストとマージを行います。 branchAがpushされた後、GitHubを開くとpull requestを行うボタンが追加されています。押してみましょう。 編集内容についてコメントを残し、【Create pull request】を押します。 管理者はAさんのプルリクエストを確認することができます。 管理者は、masterとbranchAのマージを行う必要があります。プルリクエストされた画面にある【merge】】ボタンを押せば完了です。 ＊まれにコンフリクトを起こしている場合があります。Githubの案内に従って、コンフリクト内容を確認し、必要に応じて内容の削除を行ってください。 マージされたことを確認できたら、Aさんは最新のリモートリポジトリの情報をローカルに持ってきて、不要になったブランチを削除します。 git pull origin master #ローカルをリモートの最新情報に更新 git checkout master #masterブランチに移動 git branch #branchAの存在、masterにいることを確認 git branch -d branchA #branchAの削除 git branch #branchAが消えているのか確認 2回目以降、Aさんが更新作業を行う場合や新たなメンバーが更新作業を共同で行う場合も、この方法で進めることができます。 "],
["applications.html", "Chapter 4 Applications 4.1 Example one 4.2 Example two", " Chapter 4 Applications Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],
["final-words.html", "Chapter 5 Final Words", " Chapter 5 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
